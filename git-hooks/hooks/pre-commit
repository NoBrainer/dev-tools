#!/bin/sh
# Format code based on Maven configuration and an NPM script.
# Based on: https://prettier.io/docs/en/precommit.html#option-6-shell-script

# Format all staged files with prettier
function formatWithPrettier {
  echo "$STAGED_FILES" | xargs ./node_modules/.bin/prettier --ignore-unknown --write
  if [[ $? -ne 0 ]]; then
    echo "Failed to format files with prettier"
    return 1
  else
    return 0
  fi
}

# Format with 'npm run lint'
# Assumptions: This script exists in the package.json and formats the code.
# Note: Depending on the script, this may format more files than just the staged files.
function formatWithNpmScript {
  if [[ -f "$PACKAGE_JSON_FILE" ]]; then
    npm run lint
    if [[ $? -ne 0 ]]; then
        echo "Failed to format files with 'npm run lint'"
        return 1
      else
        return 0
      fi
  fi
}

# Format with 'mvn process-sources'
# Assumptions: The pom.xml or its parent is setup with a plugin to format the code.
# Note: Depending on the plugin, this may format more files than just the staged files.
function formatWithMaven {
  if [[ -f "$POM_XML_FILE" ]]; then
    mvn process-sources
    if [[ $? -ne 0 ]]; then
        echo "Failed to format files with 'mvn process-sources'"
        return 1
      else
        return 0
      fi
  fi
}

# Revert formatted file changes that were not originally touched/changed.
# Assumptions: MODIFIED_FILES_BEFORE is set before formatting files.
# Note: This is only useful if some of the formatting affects all files instead of just the modified files.
function revertUntouchedFormattedFiles {
  MODIFIED_FILES_AFTER=$(git diff --name-only --diff-filter=ACMR | sed 's| |\\ |g')
  if [[ ! -z "$MODIFIED_FILES_AFTER" ]]; then
    while IFS= read -r fileChangedAfter; do
      # Check if the file was modified before formatting
      changedBeforeFormatting=0
      while IFS= read -r fileChangedBefore; do
        if [[ "$fileChangedBefore" = "$fileChangedAfter" ]]; then
          changedBeforeFormatting=1
          break
        fi
      done <<< "$MODIFIED_FILES_BEFORE"
      
      # If it was not changed before formatting, then we want to revert the formatting changes
      if [[ $changedBeforeFormatting = 0 ]]; then
        git restore "$fileChangedAfter"
        if [[ $? -ne 0 ]]; then
          echo "Failed reverting file: '$fileChangedAfter'"
          return 1
        fi
      fi
    done <<< "$MODIFIED_FILES_AFTER"
    return 0
  fi
}

# Get all modified files before formatting and escape spaces
MODIFIED_FILES_BEFORE=$(git diff --name-only --diff-filter=ACMR | sed 's| |\\ |g')

# Get staged files and escape spaces
STAGED_FILES=$(git diff --staged --name-only --diff-filter=ACMR | sed 's| |\\ |g')

# Exit if there are no staged files
[ -z "$STAGED_FILES" ] && exit 0

# Find relevant files
REPO_ROOT_DIR="$(git rev-parse --show-toplevel)"
PACKAGE_JSON_FILE="$REPO_ROOT_DIR/package.json"
POM_XML_FILE="$REPO_ROOT_DIR/pom.xml"

# Do the formatting based on the files in the repository
formatWithNpmScript
formatWithMaven

# Note: This is here as an example. It's commented-out since we don't want to require each repository to have prettier.
#formatWithPrettier

# Add back the formatted files to staging
echo "$STAGED_FILES" | xargs git add

# Revert files that were only changed from formatting
revertUntouchedFormattedFiles

exit 0
